version: "3"
services:
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: 'message-broker'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ./data/mq:/var/lib/rabbitmq/
        - ./logs/mq:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - mq-frontend
      - backend-logger

  db:
    image: mongo:7.0.7-rc0-jammy
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: logger
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - ./data/db:/data/db
    networks:
      - backend-db
      - backend-logger

  logger:
    build: 
      dockerfile: logger/Dockerfile
      # can override the arguments
      args:
        # Set to false if you want to ignore the tests. default True
        - RUN_TESTS=True
        # Specify the exact arguements if needed. By default it will run all the tests in the current directory (.)
        - TEST_ARGS=-m unit
    container_name: 'logger'
    depends_on:
      - message-broker
      - db
    volumes:
      - ./logger:/logger
    restart: on-failure
    networks:
      - backend-logger
      - backend-db
  
  backend:
    build: 
      dockerfile: server/Dockerfile
      # can override the arguments
      args:
        # Set to false if you want to ignore the tests. default True
        - RUN_TESTS=False
        # Specify the exact arguements if needed. By default it will run all the tests in the current directory (.)
        - TEST_ARGS=.
    container_name: 'backend'
    environment:
      APP_ENV: "dev"
      APP_DEBUG: "True"
      APP_PORT: 8080
      DB_NAME: logger
      DB_USER: root
      DB_PASS: root
      DB_HOST: db
    depends_on:
      - logger
      - db
    volumes:
      - ./server:/app
    restart: on-failure
    networks:
      - backend-db

  webserver:
    build:
      dockerfile: nginx/Dockerfile
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "dev"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs/webserver:/var/log/nginx
    depends_on:
      - backend
    networks:
      - frontend
      - backend-db

networks:
  mq-frontend:
    driver: bridge
  frontend:
    driver: bridge
  backend-logger:
    driver: bridge
  backend-db:
    driver: bridge